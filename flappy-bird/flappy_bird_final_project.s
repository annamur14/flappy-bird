/*● Anna Murray / amx0178

● Flappy Bird - navigate your bird to avoid hitting the pipes!
● Advanced Features: gravity, screen scrolling, sound
● Controls: Press push button 0 to jump
*/
.text

// color
.EQU SKYCOLOR, 0x55ff
.EQU BACKGROUNDCOLOR, 0xd6b3


// These are addresses for the pixel buffer and text buffer
.EQU PIX_BUFFER, 0xc8000000
.EQU TEXT_BUFFER, 0xc9000000
.EQU BUTTON_ADDR, 0xff200050

// These are some useful defines that will help access structure fields
.EQU PIXMAP_WIDTH, 0
.EQU PIXMAP_HEIGHT, 2
.EQU PIXMAP_TRANSPARENCY, 4
.EQU PIXMAP_PIXELDATA, 6
.EQU PIXMAP_PTR, 0
.EQU XPOS, 4
.EQU YPOS, 6
.EQU XVEL, 8 
.EQU YVEL, 10
.EQU LEFTX, 12
.EQU RIGHTX, 14
.EQU TOPY, 16
.EQU BOTTOMY, 18

// ComputeDigit(k(r0)): computes digit needed for DrawNum
// quot: r4
// rem: r5
// dividend (k): r0 -> r6
// divisor: r7
// quot*10: r8
ComputeDigit:
	push {r4, r5, r6, r8, lr}
	
	// initializing registers
	mov r4, #0
	mov r6, r0
	mov r5, r0 // rem = dividend
	// unconditional branch to if -> check if rem < divisor
	b IsRemLDivisor
	
	// loop body
	Body:
		sub r5, r5, #10 // rem = rem - divisor 
		add r4, r4, #1 // quot++
		
	// check if rem >= divisor, branch to body if yes, done if no
	IsRemLDivisor:
		cmp r5, #10 
		bge Body
		
		// quot*10
		lsl r8, r4, #3 // quot*8
		add r8, r8, r4 // +quot
		add r8, r8, r4 // +quot
		
		// get remainder
		sub r5, r6, r8 // rem = dividend-(quot*10)
		
		// push digits to stack after getting remainder, pop them in DrawNum loop
		
		// move remainder into r0 and return
		mov r0, r5
		
	pop {r4, r5, r6, r8, pc}
	
// DrawNum: DrawNum(x(r0), y(r1), n(r2)) - Draws an integer (decimal/base 10) value (n – signed int) at
// screen column x, row y. The integer value should be preceded by a “-” if the value is
// negative and nothing if it is zero/positive. Do not display any leading zeros. As above,
// text should be clipped around screen edges
DrawNum:
	push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	// initialize registers
	mov r6, r0 // x (r0)
	mov r7, r1 // y (r1)
	mov r8, r2 // n(r2)
	mov r11, #0 // initialize loop counter for push&pop
	
	// check if n(r2)=0, if yes: write "0" and done
	cmp r2, #0
	bne NotZero
	add r2, r2, #48
	bl DrawChar
	b DrawNumDone
	NotZero:
	// loop 1 (push) body
	PushLoop: 
	
		mov r0, r8 // prepare for ComputeDigit call -> put n(r8) in r0
		// push numbers onto stack after division
		
		// divide
		bl ComputeDigit // remainder in r0
		// check if r0 == 0, if yes were out of digits -> skip to poploop 
		cmp r0, #0
		beq PopLoop
		// if no, theres a real digit in r0, need to push
		push {r0}
		add r11, r11, #1 // incrememnt loop counter -> # of digits we need from stack
		
		// move divdend into r9
		mov r9, r8
		// clear r8
		mov r8, #0
		// unconditional branch to if -> check if dividend < divisor (10)
		b IsRemLDivisor2

		// dividing loop body
		DivideBody:
			sub r9, r9, #10 // rem = rem - divisor 
			add r8, r8, #1 // quot++

		IsRemLDivisor2:
			cmp r9, #10 
			bge DivideBody
		
		b PushLoop
	PopLoop:
		b IsR10GT9
		MainLoop:
		pop {r0}
		mov r10, r0
		mov r2, r0 // move r0 to r2 -> prepare to call DrawChar
		// move x and y into r0 r1
		mov r0, r6 // get correct x
		mov r1, r7 // get correct y
		add r2, r2, #48 // get ascii value of r2 digit
		bl DrawChar // print digit
		// increment x
		add r6, r6, #1
		// decrement loop counter
		sub r11, r11, #1
		IsR10GT9:
			cmp r11, #0
			bne MainLoop
	DrawNumDone:
	pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}

// DrawChar(x[r0], y[r1], c[r2]): draws a given character on the screen at the given coords
// strb(store) ascii value(hex) at computed address 
	// left shift y 7, add x, add base address
.align 2
DrawChar:
	// save lr
	push {r4, r5, r6, r7, lr}
	mov r6, #0
	mov r5, #0
	// load charbuffer address
	ldr r4, =TEXT_BUFFER
	// if x > 79, skip writing char section
	cmp r0, #79
	bgt Done
	// compute address
	lsl r7, r1, #7 // shfit y left 7
	add r6, r7, r0 // add y and x
	add r5, r6, r4 // add base address
	
	// write ascii char(r2) at address
	strb r2, [r5]
	// done
	Done:
	// return
	pop {r4, r5, r6, r7, pc}

// ClearTextBuffer() : none
// Clears the text buffer by filling it with spaces (ASCII 0x20).
//
// for every spot in the grid, write a space (ASCII 0x20) to the text buffer
//
// r4: number of rows
// r5: number of columns
// r6: inner loop counter (i)
// r7: outer loop counter (j)
.align 2
ClearTextBuffer:
	push {r4, r5, r6, r7, lr}
	mov r0, #0 // initial x value
	mov r1, #0 // initial y value
	mov r2, #0x20 // ASCII value for space
	mov r4, #60 // 60 rows in buffer
	mov r5, #80 // 80 cols in buffer
	mov r6, #0 // initialize i
	mov r7, #0 // initialize j
	b InnerLoop
	
	OuterLoop:
		add r7, r7, #1 // increment j
		// end if j==60
		cmp r7, r4
		beq ClearTextBufferDone
		mov r6, #0 // reset i
		InnerLoop:
		// draw char
		// increment counter
		// compare counter with r4 -> larger=move on to next row & reset counter
			mov r0, r6
			mov r1, r7
			bl DrawChar
			add r6, r6, #1
			
			cmp r6, r5 // compare i and 80
			bne InnerLoop // loop again if theyre not equal
			beq OuterLoop // branch to outerloop if they are equal
	ClearTextBufferDone:
	pop {r4, r5, r6, r7, pc}
	
// DrawPix: (x[r0], y[r1], color[r2])
// write 1 pixel of color r2 to the screen at (x,y)
.align 2
DrawPix:
	// save lr
	push {r4, r5, r6, r7, r8, lr}
	mov r6, #0
	mov r5, #0
	// load pix_buffer address
	ldr r4, =PIX_BUFFER
	// if x >= 320, skip writing pix section
	cmp r0, #320
	bge DrawPixDone
	// if x is negative, skip writing pix
	cmp r0, #0
	blt DrawPixDone
	// if y >= 240, skip writing pix
	cmp r1, #240
	bge DrawPixDone
	// if y is negative, skip writing pix
	cmp r1, #0
	blt DrawPixDone
	// compute address
	lsl r7, r1, #9 // shfit y left 9 **CHANGED**
	add r6, r7, r0 // add y and x
	lsl r8, r6, #1 // shift y+x left 1, leaves a 0 in lsb 
	add r5, r8, r4 // add base address
	
	// write color(r2) at calculated address
	strh r2, [r5] 
	// done
	DrawPixDone:
	// return
	pop {r4, r5, r6, r7, r8, pc}
	
	
	
// ClearVGA( color : uint) : none
// Clears the video buffer by filling it with the given color value. 
// Colors as 16-bit values (zero extended to 32-bits for procedure call). 
// For instance, the value 0xffff would fill the screen with white pixels and
// the value 0x0000 would paint it black.

	// r4: number of rows
// r5: number of columns
// r6: inner loop counter (i)
// r7: outer loop counter (j)
.align 2
ClearVGA:
	push {r4, r5, r6, r7, r8, lr}
	mov r2, r0
	mov r0, #0 // initial x value
	mov r1, #0 // initial y value
	// ldr r2 // color
	mov r4, #240 // 60 rows in buffer
	mov r5, #320 // 80 cols in buffer
	mov r6, #0 // initialize i
	mov r7, #0 // initialize j
	b InnerLoopPix
	
	OuterLoopPix:
		add r7, r7, #1 // increment j
		// end if j==240
		cmp r7, r4
		beq ClearVGADone
		mov r6, #0 // reset i
		InnerLoopPix:
		// draw char
		// increment counter
		// compare counter with r4 -> larger=move on to next row & reset counter
			mov r0, r6
			mov r1, r7
			bl DrawPix
			add r6, r6, #1
			
			cmp r6, r5 // compare i and 320
			bne InnerLoopPix // loop again if theyre not equal
			beq OuterLoopPix // branch to outerloop if they are equal
	ClearVGADone:
	pop {r4, r5, r6, r7, r8, pc}


// BitBlit(pmap[r0] : pixmap_ptr, x[r1] : int, y[r2] : int) : none
// Draws a pixelmap (color image) on the screen, 
// given a pointer to the pixmap data structure. The image will be centered at (x,y). 
// Your routine should clip the image as necessary – do not attempt to draw
// any portion of the image that does not fit into the screen – draw only what 
// fits into the (0,0) - (319, 239) viewable screen. Note that the above 
// formulation would allow BitBlit to be called with negative values (e.g. (-10, -5)
// which should imply that portions of the image will be offscreen).

.align 2
BitBlit:
// calculate top left of image using (x,y) and PIXMAP_WIDTH/PIXMAP_HEIGHT
// store transparency value (we will compare each pixel value to this when we decide if we write or skip it)
// for each pixel in pixmap, write/skip
	// r0 -> r4: pixmap_ptr (address)
	// r1 -> r5: given x [in loops: r5 = ptr to current data]
	// r2 -> r6: given y
	// r7: transparency value (PIXMAP_TRANSPARENCY)
	// r8: PIXMAP WIDTH
	// r9: PIXMAP HEIGHT
	// r10: top left x
	// r11: top left y
	// r3: j (col counter)
	// r12: i (row counter)
	push {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	// setup
	mov r4, r0
	mov r5, r1
	mov r6, r2
	mov r3, #0
	mov r12, #0
	// calculate top left of image 
	// take width, divide by 2, sbutract it from given x(r1/r5) -> top left x
	// take height, divide by 2, subtract it from given y(r2/r6) -> top left y
	ldrsh r8, [r4, #PIXMAP_WIDTH] // r8 <- pixmap_width 
	ldrsh r9, [r4, #PIXMAP_HEIGHT] // r9 <- pixmap_height
    
	// calculating xleft wrong? its 4 too small rn
	mov r10, r8, asr #1 // divide r8(width) by 2
	sub r10, r5, r10 // x - width/2
	
	
	mov r11, r9, asr #1 // height/2
	sub r11, r6, r11 // y - height/2
	
	// get transparency value
	ldrh r7, [r4, #PIXMAP_TRANSPARENCY]
	
	// (lea) load address of pixmap data (OVERWRITING R5)
	mov r5, #0
	add r5, r5, #PIXMAP_PIXELDATA
	add r5, r5, r4 // r4 was r0
	// for each pixel in pixmap: draw/skip
	OuterLoopBitBlit:
		add r3, r3, #1 // increment j
		// end if j==height
		cmp r3, r9
		bgt End
		mov r12, #0 // reset i
		InnerLoopBitBlit:
		// draw char
		// increment counter
		// compare counter with r4 -> larger=move on to next row & reset counter
		// need to add top left x(r10) + counter & top left y(r11) 
			mov r0, #0
			mov r1, #0
			add r0, r12, r10
			add r1, r3, r11
			sub r1, r1, #1 // should fix j offset? ***
			// need pix color hex for r2
			ldrh r2, [r5]
			// need to check if its transparent (matches r7)
			cmp r2, r7
			beq Transparent
			bl DrawPix
			Transparent:
			add r12, r12, #1 // increment i
			add r5, r5, #2 // increment data ptr
			
			cmp r12, r8 // compare i and image width
			bne InnerLoopBitBlit // loop again if theyre not equal
			beq OuterLoopBitBlit // branch to outerloop if they are equal
	
	End:
		pop {r4, r5, r6, r7, r8, r9, r10, r11, r12, pc}                             // Return
	


.align 2
init:
	ldr sp, =0x800000	// Initial stack pointer
	push {r4, r5, r6, r7, lr}
	bl ClearTextBuffer
	pop {r4, r5, r6, r7, pc}

// DrawSprite: draws a sprite at the positions in its struct
// inputs: struct ptr (r0)
.align 2
DrawSprite:
    push {r4, r5, lr} // do i need all th bitblit registers too
	mov r5, r0
    ldr r4, [r0, #PIXMAP_PTR] // r4 <- sprite.pixmap_ptr
    ldrsh r1, [r0, #XPOS]       // r1 <- sprite.xpos
    ldrsh r2, [r0, #YPOS]       // r2 <- sprite.ypos
    mov r0, r4
    bl BitBlit                // draw sprite
	mov r0, r5
    pop {r4, r5, pc}
	
	
// DetectCollision: checks for collision and prints if collision detected
// inputs: sprite1_ptr(r0), sprite2_ptr(r1)
// load both sprite structs and their bounding boxes
// check if bounding points are same
// if any of one sprite overlaps with the other, print collision
.align 2
DetectCollision:
    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}

    // load sprite 1 bounds
    ldrsh r4, [r0, #LEFTX]   // load leftx1
    ldrsh r5, [r0, #RIGHTX]  // load rightx1
    ldrsh r6, [r0, #TOPY]    // load topy1
    ldrsh r7, [r0, #BOTTOMY] // load bottomy1

    // load sprite 2 bounds
    ldrsh r8, [r1, #LEFTX]
    ldrsh r9, [r1, #RIGHTX]
    ldrsh r10, [r1, #TOPY]
    ldrsh r11, [r1, #BOTTOMY]

    // check for horizontal overlap
    cmp r4, r9   // leftx1 <= rightx2
    bgt NoCollision
    cmp r5, r8   // rightx1 >= leftx2
    blt NoCollision

    // check for vertical overlap
    cmp r6, r11  // topy1 <= bottomy2
    bgt NoCollision
    cmp r7, r10  // bottomy1 >= topy2
    blt NoCollision

    // OVERLAP DETECTED:
	bl GameOver
	b CollisionDone

NoCollision:
	//bl ClearTextBuffer
CollisionDone:
    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}



// DrawStr: DrawStr(x(r0), y(r1), s(r2)) - Draws a string (s – null terminated) at screen column x, row y.
// Text should be clipped (e.g. do not attempt to draw any characters that do not fit on the
// screen).
// 
// save registers used in func
// while *ptr != \0 (ASCII 0x00)
//	DrawChar(x, y, *ptr)
.align 2
DrawStr:
	// save registers
	push {r4, r5, lr}
	
	// move string to r5
	mov r5, r2
	
	// get byte
	ldrb r4, [r5] 
	
	// unconditional branch to condition check/if
	b IsCharNull
	
	// loop body (beans)
	Beans:
		// mov char(r4) to r2 to prepare for DrawChar call
		mov r2, r4
		// draw character
		bl DrawChar
		// go to next char
		add r5, r5, #1
		
		// get byte
		ldrb r4, [r5] 
		
		cmp r4, #0
		beq IsCharNull

		// increement r0
		add r0, r0, #1 
	IsCharNull:
	// compare ptr register(r4) and 
		cmp r4, #0
		bne Beans //
		
	pop {r4, r5, pc}
	
	
	
	

// ButtonPressedCheck: checks if button 0 is pressed
.align 2
ButtonPressedCheck:
	push {r4, r5, r6, r7, r8, lr}
		
		// negative yvel = up
		// positive yvel = down
	
	ldr r0, =BirdStruct // load ptr to button controlled sprite
	ldr r1, =BUTTON_ADDR // button addr
	ldr r4, [r1] // get all button inputs
	ldr r2, =IsButtonPressed // load addr of global
	ldr r3, [r2] // load contents of global
	
	// compare contents of global vs io
	cmp r4, r3
	beq ButtonCheckDone
	bgt Bounce// io==1, global==0
	// if button io==0 && global==1 -> write 0 to global, skip to end
	// if were here, r4<r2 -> io==0, global==1
	mov r7, #0
	str r7, [r2] // write 0 to global
	b ButtonCheckDone
	
	// else if buttonio==1 && global==0 -> BOUNCE, write 1 to global, skip to end
	Bounce:
	bl PlaySound
	ldrsh r7, [r0, #YVEL]// load yvel 
	cmp r7, #0
	beq ButtonCheckDone // if yvel==0 -> do nothing
	blt Up
	// if yvel > 0 (down) -> yvel=-yvel
	rsb r7, r7, #0// yvel=-yvel
	b BounceDone
	
	// else if yvel < 0 (up) -> yvel=origyvel
	Up: // sprite going up, yvel is negative
	bl PlaySound
	ldr r8, =OrigYvel 
	ldrh r8, [r8]
	add r8, r8, r8
	mvn r7, r8
	b BounceDone
	
	BounceDone:
	strh r7, [r0, #YVEL]
	mov r7, #1 
	str r7, [r2]// set global=1
	b ButtonCheckDone
	
	// else (same io and global) -> do nothing and skip to end
	
	ButtonCheckDone:
	pop {r4, r5, r6, r7, r8, pc}
.pool

// DrawBird: draw bird at (53, ypos)
.align 2
DrawBird:
	push {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	ldr r3, =BirdStruct
	ldr r0, [r3, #PIXMAP_PTR]
	mov r1, #56 // x=56
	ldrh r2, [r3, #YPOS]
	bl BitBlit
	// load bottomy
	// branch to game over if bottomy==209
	pop {r4, r5, r6, r7, r8, r9, r10, r11, r12, pc}
	
	// 
	// UpdateSprite: updates the positions and velocities in the sprite struct
// inputs: struct ptr (r0)
// r4: new_xpos
// r5: new_ypos
// r6: total pix buffer width
// r7: total pix buffer height
// r8: pixmap width
// r9: pixmap height 239
// r10: x bound
// r11: y bound
// r12: pixmap address
.align 2
UpdateSprite:
	push {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	 
	ldr r12, [r0, #PIXMAP_PTR] // load addr to pixmap
	
	// load pixmap width and height
	ldrsh r8, [r12, #PIXMAP_WIDTH] // r8 <- pixmap_width 
	ldrsh r9, [r12, #PIXMAP_HEIGHT] // r9 <- pixmap_height
	
	ldrh r6, =PIX_WIDTH // address of PIX_WIDTH constant
	ldrsh r6, [r6]

	// new_xpos = structptr[r0].xpos + structptr.xvel
	ldrsh r4, [r0, #XPOS]
	ldrsh r1, [r0, #XVEL]
	add r4, r4, r1
	
	// calculate leftx and rightx bounds
	mov r7, r8, asr #1 // divide r8(width) by 2
    
	sub r10, r4, r7 // x - width/2
	strh r10, [r0, #LEFTX] // struct.leftx = x - width/2
	
	add r10, r4, r7
    strh r10, [r0, #RIGHTX] // struct.rightx = x + width/2
	
	// new_ypos = structptr.ypos + structptr.yvel
	ldrsh r5, [r0, #YPOS]
	ldrsh r2, [r0, #YVEL]
	add r5, r5, r2
	
	// calculate topy and bottomy bounds
	mov r3, r9, asr #1 // divide r9(height) by 2
	
	sub r11, r5, r3 // y - height/2
    strh r11, [r0, #TOPY] // struct.topy = y - height/2
    
    add r11, r5, r3
    strh r11, [r0, #BOTTOMY] // struct.bottomy = y + height/2
	
	
	// if bounding box bounds are outside of pixmap bounds 
	// assign bounding box to bound of pix buffer
	// recalculate: (newx,newy) = (boundx,boundy) +- (width,height)/2
	
	// if (leftx < 0)
	ldrsh r10, [r0, #LEFTX]
	cmp r10, #0
	bge UpdateSprite0
	// leftx ⇽ 0 ; structptr.xvel ⇽ - structptr.xvel
	mov r10, #0
	strh r10, [r0, #LEFTX]
	//add r4, r10, r7	// new_xpos = leftx + width/2
	mov r4, r7
	strh r4, [r0, #XPOS]
	rsb r1, r1, #0
	strh r1, [r0, #XVEL]
	
	UpdateSprite0:
		// if (rightx > 319)
		ldrsh r10, [r0, #RIGHTX]
		cmp r10, r6
		ble UpdateSprite2
		// rightx ⇽ 319 ; structptr.xvel ⇽ - structptr.xvel
		mov r10, r6
		strh r10, [r0, #RIGHTX]
		sub r4, r10, r7 // new_xpos = rightx - width/2
		strh r4, [r0, #XPOS]
		rsb r1, r1, #0
		strh r1, [r0, #XVEL]
	
	// bird can go above screen and come back down
	/*UpdateSprite1: 
		// if (topy < 0)
		ldrsh r11, [r0, #TOPY]
		cmp r11, #0
		bgt UpdateSprite2
		// topy ⇽ 0 ; sructptr.yvel ⇽ - structptr.yvel
		mov r11, #0
		strh r11, [r0, #TOPY]
		//add r5, r11, r3 // new_ypos = topy + height/2
		mov r5, r3
		strh r5, [r0, #YPOS]
		rsb r2, r2, #0
		strh r2, [r0, #YVEL]*/
	
	UpdateSprite2:
		// if (bottomy > 210) 209==platform location
		ldrsh r11, [r0, #BOTTOMY]
		cmp r11, #209
		ble UpdateSprite3
		// bottomy ⇽ 0 ; structptr.yvel ⇽ - structptr.yvel
		mov r11, #209
		strh r11, [r0, #BOTTOMY]
		sub r5, r11, r3 // new_ypos = bottomy = height/2
		strh r5, [r0, #YPOS] 
		mov r2, #0 // bird sits on platform
		//rsb r2, r2, #0
		strh r2, [r0, #YVEL]
		bl GameOver
	
	UpdateSprite3:
		strh r1, [r0, #XVEL]
		add r2, r2, #1
		strh r2, [r0, #YVEL]
		strh r4, [r0, #XPOS]
		strh r5, [r0, #YPOS]

	pop {r4, r5, r6, r7, r8, r9, r10, r11, r12, pc}
.pool

//DrawBackground: draws ground platform
DrawBackground:
	push {r4, r5, r6, r7, r8, lr}
	mov r2, r0
	mov r0, #0 // initial x value
	mov r1, #209 // initial y value
	// ldr r2 // color
	mov r4, #240 // 60 rows in buffer
	mov r5, #320 // 80 cols in buffer
	mov r6, #0 // initialize i
	mov r7, #210 // initialize j
	b InnerLoopBackground
	
	OuterLoopBackground:
		add r7, r7, #1 // increment j
		// end if j==240
		cmp r7, r4
		beq BackgroundDone
		mov r6, #0 // reset i
		InnerLoopBackground:
		// draw char
		// increment counter
		// compare counter with r4 -> larger=move on to next row & reset counter
			mov r0, r6
			mov r1, r7
			bl DrawPix
			add r6, r6, #1
			
			cmp r6, r5 // compare i and 320
			bne InnerLoopBackground // loop again if theyre not equal
			beq OuterLoopBackground // branch to outerloop if they are equal
	BackgroundDone:
	pop {r4, r5, r6, r7, r8, pc}
	

// UpdatePipe: update pipe's position based on info in its struct
.align 2
UpdatePipe:
	push {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
	
	ldr r12, [r0, #PIXMAP_PTR] // load addr to pixmap
	
	// load pixmap width and height
	ldrsh r8, [r12, #PIXMAP_WIDTH] // r8 <- pixmap_width 
	ldrsh r9, [r12, #PIXMAP_HEIGHT] // r9 <- pixmap_height
	
	ldrh r6, =PIX_WIDTH // address of PIX_WIDTH constant
	ldrsh r6, [r6]

	// new_xpos = structptr[r0].xpos + structptr.xvel
	ldrsh r4, [r0, #XPOS]
	ldrsh r1, [r0, #XVEL]
	sub r4, r4, r1
	
	// calculate leftx and rightx bounds
	mov r7, r8, asr #1 // divide r8(width) by 2
    
	sub r10, r4, r7 // x - width/2
	strh r10, [r0, #LEFTX] // struct.leftx = x - width/2
	
	add r10, r4, r7
    strh r10, [r0, #RIGHTX] // struct.rightx = x + width/2
	
	// new_ypos = structptr.ypos + structptr.yvel
	ldrsh r5, [r0, #YPOS]
	
	// calculate topy and bottomy bounds
	mov r3, r9, asr #1 // divide r9(height) by 2
	
	sub r11, r5, r3 // y - height/2
    strh r11, [r0, #TOPY] // struct.topy = y - height/2
    
    add r11, r5, r3
    strh r11, [r0, #BOTTOMY] // struct.bottomy = y + height/2
	
	// if (leftx < 0)
	ldrsh r10, [r0, #RIGHTX]
	cmp r10, #0
	bge UpdatePipe3
	// leftx ⇽ 0 ; structptr.xvel ⇽ - structptr.xvel
	mov r10, #0
	strh r10, [r0, #RIGHTX]
	mov r4, #660 // back of pipes
	strh r4, [r0, #XPOS]
	// increment score if its a top pipe
	//cmp r5, #32
	//bgt UpdatePipe3
	ldr r10, =Score
	ldr r11, [r10]
	add r11, r11, #1
	str r11, [r10]
	
	UpdatePipe3:
		//strh r1, [r0, #XVEL]
		strh r4, [r0, #XPOS]

	pop {r4, r5, r6, r7, r8, r9, r10, r11, r12, pc}
.pool

.align 2
UpdatePipes:
	push {r4, r5, r6, lr}
	// for each pipe: updatepipe, drawpipe, check collision with bird
	ldr r4, =PipeArray // ptr to PipeArray
	mov r5, #0 // counter 
	ldr r6, =BirdStruct
	MainPipeLoop:
		ldr r0, [r4, r5] // get ptr to specific pipe struct
		bl UpdatePipe
		bl DrawSprite
		//ldr r0, [r4, r5]
		//bl AddPoint
		mov r1, r6
		bl DetectCollision
		ldrh r0, =BACKGROUNDCOLOR
		bl DrawBackground
		add r5, r5, #4 
		cmp r5, #40 
		blt MainPipeLoop
	pop {r4, r5, r6, pc}
.pool
	
// GameOver: write "GAME OVER" and score if player loses game
// infinitely loop back to top of gameover
.align 2
GameOver:
	mov r0, #0
	bl ClearVGA
	bl ClearTextBuffer
	bl GameOverSound
	GameOverInfLoop:
		ldr r2, =GameOverString
		mov r0, #36
		mov r1, #28
		bl DrawStr
		ldr r2, =ScoreString
		mov r0, #37
		mov r1, #31
		bl DrawStr
		mov r0, #44
		mov r1, #31
		ldr r3, =Score
		ldr r3, [r3]
		lsr r2, r3, #1
		//mov r2, r3
		bl DrawNum
		b GameOverInfLoop
		
// GameOverSound: plays a sequence of notes when player loses the game
.align 2
GameOverSound:
	push {r4, r5, r6, r8, lr}
		mov r3, #0
		mov  r8, #0x14 // tone 
		ldr  r6, =0xff203040 // audio queue addr
		ldr  r4, =0x40000000//0x40000000 // volume i think
		mov  r5, r8
	OverWaitForWriteSpace:
		cmp r3, #100
		bge ChangeTone
		ldr  r2, [r6, #4]
		tst  r2, #0xff000000
		beq  OverWaitForWriteSpace // queue full, need to wait
		tst  r2, #0x00ff0000
		beq  OverWaitForWriteSpace
	OverWriteTwoSamples:
		str  r4, [r6, #8] // out left
		str  r4, [r6, #12] // out right
		subs r5, #1
		bne  OverWaitForWriteSpace
	OverHalfPeriodInvertWaveform:
		mov  r5, r8
		neg  r4, r4
		add r3, r3, #1
		b    OverWaitForWriteSpace
	ChangeTone:
		mov r3, #0
		mov  r8, #0x15 // tone 
		ldr  r6, =0xff203040 // audio queue addr
		ldr  r4, =0x40000000//0x40000000 // volume i think
		mov  r5, r8
	OverWaitForWriteSpace2:
		cmp r3, #100
		bge ChangeToneAgain
		ldr  r2, [r6, #4]
		tst  r2, #0xff000000
		beq  OverWaitForWriteSpace2// queue full, need to wait
		tst  r2, #0x00ff0000
		beq  OverWaitForWriteSpace2
	OverWriteTwoSamples2:
		str  r4, [r6, #8] // out left
		str  r4, [r6, #12] // out right
		subs r5, #1
		bne  OverWaitForWriteSpace2
	OverHalfPeriodInvertWaveform2:
		mov  r5, r8
		neg  r4, r4
		add r3, r3, #1
		b    OverWaitForWriteSpace2
	ChangeToneAgain:
		mov r3, #0
		mov  r8, #0x1c // tone 
		ldr  r6, =0xff203040 // audio queue addr
		ldr  r4, =0x40000000//0x40000000 // volume i think
		mov  r5, r8
	WaitForWriteSpace3:
		cmp r3, #200
		bge OverDone
		ldr  r2, [r6, #4]
		tst  r2, #0xff000000
		beq  WaitForWriteSpace3// queue full, need to wait
		tst  r2, #0x00ff0000
		beq  WaitForWriteSpace3
	WriteTwoSamples3:
		str  r4, [r6, #8] // out left
		str  r4, [r6, #12] // out right
		subs r5, #1
		bne  WaitForWriteSpace3
	HalfPeriodInvertWaveform3:
		mov  r5, r8
		neg  r4, r4
		add r3, r3, #1
		b    WaitForWriteSpace3
	OverDone:
	pop {r4, r5, r6, r8, pc}

		
		
// PlaySound: plays a short tone - used for button being pressed/bird jumping
.align 2	
PlaySound:
	push {r4, r5, r6, r7, r8, r9, lr}
		mov r7, #0
		mov  r8, #0xf // tone 
		ldr  r6, =0xff203040 // audio queue addr
		ldr  r4, =0x40000000//0x40000000 // volume i think
		mov  r5, r8
	WaitForWriteSpace:
		cmp r7, #35 // # of times this loop runs -> duration of tone
		bge SoundDone
		ldr  r9, [r6, #4]
		tst  r9, #0xff000000
		beq  WaitForWriteSpace // queue full, need to wait
		tst  r9, #0x00ff0000
		beq  WaitForWriteSpace
	WriteTwoSamples:
		str  r4, [r6, #8] // out left
		str  r4, [r6, #12] // out right
		subs r5, #1
		bne  WaitForWriteSpace
	HalfPeriodInvertWaveform:
		mov  r5, r8
		neg  r4, r4
		add r7, r7, #1
		b    WaitForWriteSpace
	SoundDone:
	pop {r4, r5, r6, r7, r8, r9, pc}

.global _start
_start:
	
	// Inital stack
	mov sp, #0x800000
	
	bl init
	
.align 2
inf_loop:

	ldrh r0, =SKYCOLOR
	bl ClearVGA
	bl ButtonPressedCheck

	ldr r0, =BirdStruct
	bl UpdateSprite
	
	bl UpdatePipes
	
	ldr r0, =BirdStruct
	bl DrawBird
	
	b inf_loop
	

	
.data

.align 2
PIX_WIDTH:
	.hword 319

.align 2
CollisionString:
	.string "Collision Occurred!"

.align 2
ScoreString:
	.string "SCORE: "
	
.align 2
HighScoreString:
	.string "HIGH SCORE: "
	
.align 2
GameOverString:
	.string "GAME OVER!"
	
.align 2
IsButtonPressed:
	.word 0x0
	
.align 2
OrigYvel:
	.hword 5 
	
.align 2
Score:
	.word 0x0

.align 2
BirdStruct:
	.word BirdSprite // pixmap ptr - 4 bytes
	.hword 53// xpos - 2 bytes
	.hword 120 // ypos - 2 byte
	.hword 0// x vel - 2 byte
	.hword =OrigYvel// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
	
// PipeArray: array of addresses of pipe structs
// dimesnions: 32x128
.align 2
PipeArray: 
	.word TopPipe1 
	.word BottomPipe1 
	.word TopPipe2 
	.word BottomPipe2
	.word TopPipe3 
	.word BottomPipe3
	.word TopPipe4 
	.word BottomPipe4
	.word TopPipe5 
	.word BottomPipe5
.align 2
TopPipe1:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 160// xpos - 2 bytes
	.hword 0 // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0 // y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2	
BottomPipe1:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 160// xpos - 2 bytes
	.hword 228// ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2
TopPipe2:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 270// xpos - 2 bytes
	.hword -32//0xfffc // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2	
BottomPipe2:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 270// xpos - 2 bytes
	.hword 196 // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2
TopPipe3:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 400// xpos - 2 bytes
	.hword -8 // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2	
BottomPipe3:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 400// xpos - 2 bytes
	.hword 220 // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2
TopPipe4:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 530// xpos - 2 bytes
	.hword 4 // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2	
BottomPipe4:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 530// xpos - 2 bytes
	.hword 232 // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2	
TopPipe5:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 660// xpos - 2 bytes
	.hword 32 // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy
.align 2	
BottomPipe5:
	.word PipeSprite // pixmap ptr - 4 bytes
	.hword 660// xpos - 2 bytes
	.hword 260 // ypos - 2 byte
	.hword 8// x vel - 2 byte
	.hword 0// y vel - 2 byte
	.hword 0 // leftx
	.hword 0 // rightx
	.hword 0 // topy
	.hword 0 // bottomy

.align 2
BirdSprite:
	.hword 16, 12, 0xe73a
	.hword 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0x0, 0x0, 0x0, 0x0, 0x20, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a
	.hword 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0x0, 0x0, 0xf785, 0xf745, 0xef49, 0x0, 0xffbe, 0x0, 0xe73a, 0xe73a, 0xe73a, 0xe73a
	.hword 0xe73a, 0xe73a, 0xe73a, 0x0, 0xff26, 0xf784, 0xef07, 0xff47, 0x820, 0xffdf, 0xf7ff, 0xffdf, 0x0, 0xe73a, 0xe73a, 0xe73a 
	.hword 0xe73a, 0x0, 0x20, 0x20, 0x801, 0xff05, 0xff48, 0xff27, 0x1040, 0xffdf, 0xf7fd, 0x0, 0xf7fe, 0x2, 0xe73a, 0xe73a
	.hword 0x800, 0xf7ff, 0xefff, 0xffde, 0xefff, 0x0, 0xff47, 0xf747, 0x1061, 0xf7ff, 0xffbe, 0x0, 0xffbd, 0x0, 0xe73a, 0xe73a
	.hword 0x0, 0xf7bf, 0xf7fe, 0xfffe, 0xffde, 0xf7df, 0x1022, 0xef64, 0xff26, 0x0, 0xeffe, 0xffdf, 0xefbf, 0x840, 0xe73a, 0xe73a 
	.hword 0x20, 0xf765, 0xffdd, 0xf7df, 0xeffe, 0xff66, 0x0, 0xf747, 0xf786, 0xf727, 0x1, 0x20, 0x0, 0x0, 0x0, 0xe73a
	.hword 0xe73a, 0x1, 0xff47, 0xf726, 0xf747, 0x0, 0xff48, 0xf746, 0xef47, 0x800, 0xfa84, 0xf2a4, 0xfa84, 0xeac4, 0xfaa4, 0x1
	.hword 0xe73a, 0xe73a, 0x0, 0x0, 0x1, 0xfde1, 0xfde0, 0xfdc0, 0x1060, 0xf2c7, 0x2, 0x20, 0x0, 0x0, 0x20, 0xe73a
	.hword 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0x20, 0xfdc0, 0xede0, 0xf5e2, 0xfde0, 0x800, 0xf2e3, 0xfa84, 0xfaa5, 0xf2a4, 0x0, 0xe73a
	.hword 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0x1, 0x40, 0xf5e0, 0xfdc0, 0xfe01, 0x1, 0x0
	.hword 0x20, 0x1, 0x20, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0x0, 0x20, 0x2, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a, 0xe73a

.align 2
PipeSprite:
	.hword 32, 128, 0xffef
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0
	.hword 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0